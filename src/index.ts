import { app, BrowserWindow } from 'electron';
import { setupAudioIPC, cleanupAudioIPC } from './main/ipc/audioIPC';
import { TranscriptionIPC } from './main/ipc/transcriptionIPC';
import { LLMIPCStub } from './main/ipc/llmIPCStub'; // Using stub until ESM import issues are resolved
import { config } from 'dotenv';
import squirrelStartup from 'electron-squirrel-startup';

// Load environment variables from .env file
config();

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (squirrelStartup) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
      allowRunningInsecureContent: false,
      experimentalFeatures: true,
      enableBlinkFeatures: 'WebCodecs'
    },
  });

  // Handle permission requests
  mainWindow.webContents.session.setPermissionRequestHandler((_, permission, callback) => {
    console.log('Permission requested:', permission);
    if (permission === 'media' || permission === 'display-capture') {
      callback(true);
    } else {
      callback(false);
    }
  });

  // Enable getDisplayMedia support (required for Electron)
  try {
    mainWindow.webContents.session.setDisplayMediaRequestHandler((request, callback) => {
      console.log('Display media request:', request);
      // Grant access to screen capture for getDisplayMedia()
      callback({ 
        video: mainWindow.webContents.mainFrame, 
        audio: 'loopback' 
      } as any);
    });
  } catch (error) {
    console.log('setDisplayMediaRequestHandler not available:', error);
  }

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  try {
    setupAudioIPC();
    new TranscriptionIPC(); // Initialize transcription IPC handlers
    LLMIPCStub.initialize(); // Initialize LLM stub handlers (LLM disabled temporarily)
    
    createWindow();
  } catch (error) {
    console.error('Error during app initialization:', error);
  }
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  cleanupAudioIPC();
  LLMIPCStub.cleanup(); // Cleanup LLM stub handlers
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
